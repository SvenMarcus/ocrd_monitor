{% extends 'base.html.j2' %}

{% block headline %}
{% block title %}OCRD Browser{% endblock %}
{% endblock %}
{% block content %}
<style>
    .container {
        width: auto;
        max-width: 100% !important;
    }

    iframe {
        height: 100vh;
        width: 100%;
    }
</style>
<script>
    function createErrorElement(message) {
        const error = document.createElement("p");
        error.innerText = "The connection to the ocrd browser was lost";
        error.classList.add("notification", "is-danger");
        return error;
    }

    document.addEventListener("DOMContentLoaded", async () => {
        const main = document.querySelector("#main-content");

        const launchUrl = "{{ url_for('workspaces.browse', workspace=workspace) }}";
        const viewUrl = "{{ url_for('workspaces.view', workspace=workspace) }}";
        const pingUrl = "{{ url_for('workspaces.ping', workspace=workspace) }}";

        const response = await fetch(launchUrl);
        if (!response.ok) {
            const error = createErrorElement("An error occured while loading the workspace");
            main.appendChild(error);
            return;
        }

        const browserProgress = document.querySelector("#browser-viewport-load");

        function replaceProgressWithIframe() {
            const browser = document.createElement("iframe");
            browser.setAttribute("id", "browser-viewport");
            browser.setAttribute("src", viewUrl);

            main.removeChild(browserProgress);
            main.appendChild(browser);

            /* NOTE: 
                 This is a workaround to detect when the connection to the Broadway Server is lost on the client side.
                 broadway.js will call the alert function when the connection is lost,
                 therefore we replace it with a custom function to show an error
            */
            function replaceIframeWithError(message) {
                const error = createErrorElement("The connection to the ocrd browser was lost");
                main.removeChild(browser);
                main.appendChild(error);
            }

            browser.contentWindow.alert = replaceIframeWithError
        }

        const interval = setInterval(async () => {
            const result = await fetch(pingUrl);
            if (!result.ok) return;
            replaceProgressWithIframe();
            clearInterval(interval);
        }, 500);
    })
</script>

<progress id="browser-viewport-load" class="progress is-primary" max="100"></progress>
{% endblock %}